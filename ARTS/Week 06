Algorithm:

```
二叉树的后续遍历：
思路：一开始的时候自己一直没有理解为什么要记录lastVisit，也就是上一次访问的节点，后来发现当不是完全二叉树的时候，也就是，如下所示，只有右节点，没有左节点的时候，需要使用到lastVisit，如果没有lastVisit的话我们是没有判断它是否已经遍历过的
1
3
思路比代码更重要，因为有了思路，才有可能写出代码，代码只是思路的一种体现，以及一种解决方法，好的代码里面也蕴含这做着的思想在其中，需要多多细细的体会。
参考文章：
https://www.cnblogs.com/grandyang/p/4251757.html
https://greyireland.gitbook.io/algorithm-pattern/shu-ju-jie-gou-pian/binary_tree
func postorderTraversal(root *TreeNode) []int {
    if root == nil {
        return nil
    }
    
    result := make([]int , 0)
    stack := make([]*TreeNode, 0)
    
    var lastVisit *TreeNode
    for root != nil || len(stack) > 0 {
        for root != nil {
            stack = append(stack, root)
            root = root.Left
        }
        node := stack[len(stack) - 1]
        
        if node.Right == nil || node.Right == lastVisit {
            stack = stack[:len(stack) - 1]
            result = append(result, node.Val)
            lastVisit = node
        }else {
            root = node.Right
        }
    }
    return result
}
// 方法2
func postorderTraversal(root *TreeNode) []int {
    if root == nil {
        return nil
    }
    
    result := make([]int , 0)
    stack := make([]*TreeNode, 0)
    
    stack = append(stack, root)
    var lastVisit *TreeNode
    
    lastVisit = root
    for len(stack) > 0 {
        node := stack[len(stack) - 1]
        if ((node.Left == nil && node.Right == nil) || node.Left == lastVisit || node.Right == lastVisit) {
            result = append(result, node.Val)
            stack = stack[:len(stack) - 1]
            lastVisit = node
        }else {
            if (node.Right != nil) {
                stack = append(stack, node.Right)
            }
            
            if (node.Left != nil) {
                stack = append(stack, node.Left)
            }
        }
    }
    return result
}
```

Review:

Tips:

Share:
