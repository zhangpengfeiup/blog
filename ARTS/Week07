Algorithm:
Leetcode:二叉树的层序遍历
```
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func levelOrder(root *TreeNode) [][]int {
     result := make([][]int, 0)
    if root == nil {
        return result
    }
    queue := make([]*TreeNode, 0)
    queue = append(queue, root)
    
    for len(queue) > 0 {
        list := make([]int, 0)
        l := len(queue)
        
        for i := 0;i < l;i++ {
            node := queue[0]
            queue = queue[1:]
            list = append(list, node.Val)
            
            if node.Left != nil {
                queue = append(queue, node.Left)
            }
            
            if node.Right != nil {
                queue = append(queue, node.Right)
            }
        }
        result = append(result, list)
    }
    return result
}
```

Review:

上半年过去了，计划还是没有实现，打算看完《现代操作系统》这本书，结果只是看了一点点，反思原因，调整计划，每天只看一页可以坚持下来么？
尽可能地去培养和养成微习惯

Tips:

想办法说服自己去做事，看书，走路，少花时间关注与自己无关的人和事
说服自己理解周围发生的人和事
写可测试的代码，每一部分代码都应该是可测试的

Share:
